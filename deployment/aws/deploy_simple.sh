#!/bin/bash

# Binance Portfolio Monitor - Simple Deploy Script
# Nahraje k√≥d na EC2 instanci pomoc√≠ rsync

# Nastaven√≠ barev
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
RED='\033[0;31m'
NC='\033[0m'

# Kontrola parametr≈Ø
if [ $# -lt 2 ]; then
    echo -e "${RED}‚ùå Chyba: Nedostatek parametr≈Ø${NC}"
    echo ""
    echo "Pou≈æit√≠: $0 <instance-ip> <key-file>"
    echo "P≈ô√≠klad: $0 54.123.45.67 my-key.pem"
    echo ""
    echo "Voliteln√© parametry:"
    echo "  -u <user>    SSH u≈æivatel (v√Ωchoz√≠: ec2-user)"
    echo "  -d <dir>     C√≠lov√Ω adres√°≈ô (v√Ωchoz√≠: /home/ec2-user/binance-monitor)"
    exit 1
fi

# V√Ωchoz√≠ hodnoty
INSTANCE_IP=$1
KEY_FILE=$2
SSH_USER="ec2-user"
TARGET_DIR="/home/ec2-user/binance-monitor"

# Zpracov√°n√≠ voliteln√Ωch parametr≈Ø
shift 2
while getopts "u:d:" opt; do
    case $opt in
        u) SSH_USER="$OPTARG";;
        d) TARGET_DIR="$OPTARG";;
        \?) echo "Neplatn√° volba: -$OPTARG" >&2; exit 1;;
    esac
done

echo -e "${GREEN}üöÄ Binance Portfolio Monitor - Deploy Script${NC}"
echo "============================================"

# Kontrola SSH kl√≠ƒçe
if [ ! -f "$KEY_FILE" ]; then
    echo -e "${RED}‚ùå SSH kl√≠ƒç nenalezen: $KEY_FILE${NC}"
    exit 1
fi

# Kontrola opr√°vnƒõn√≠ kl√≠ƒçe
chmod 400 "$KEY_FILE"

# Test SSH p≈ôipojen√≠
echo -e "\n${YELLOW}üîå Testov√°n√≠ SSH p≈ôipojen√≠...${NC}"
if ssh -o ConnectTimeout=5 -o StrictHostKeyChecking=no -i "$KEY_FILE" "$SSH_USER@$INSTANCE_IP" "echo 'SSH OK'" > /dev/null 2>&1; then
    echo -e "${GREEN}‚úÖ SSH p≈ôipojen√≠ funguje${NC}"
else
    echo -e "${RED}‚ùå Nelze se p≈ôipojit p≈ôes SSH${NC}"
    echo "Zkontrolujte:"
    echo "  - IP adresu: $INSTANCE_IP"
    echo "  - SSH kl√≠ƒç: $KEY_FILE"
    echo "  - U≈æivatele: $SSH_USER"
    echo "  - Security group povoluje SSH (port 22)"
    exit 1
fi

# Informace o nasazen√≠
echo -e "\n${YELLOW}üìã Konfigurace nasazen√≠:${NC}"
echo "   C√≠lov√Ω server: $SSH_USER@$INSTANCE_IP"
echo "   C√≠lov√Ω adres√°≈ô: $TARGET_DIR"
echo "   SSH kl√≠ƒç: $KEY_FILE"

# Z√≠sk√°n√≠ cesty k projektu
SCRIPT_DIR="$( cd "$( dirname "${BASH_SOURCE[0]}" )" && pwd )"
PROJECT_ROOT="$( cd "$SCRIPT_DIR/../.." && pwd )"

echo "   Zdrojov√Ω adres√°≈ô: $PROJECT_ROOT"

# Vytvo≈ôen√≠ c√≠lov√©ho adres√°≈ôe
echo -e "\n${YELLOW}üìÅ P≈ô√≠prava c√≠lov√©ho adres√°≈ôe...${NC}"
ssh -i "$KEY_FILE" "$SSH_USER@$INSTANCE_IP" "mkdir -p $TARGET_DIR"

# Vytvo≈ôen√≠ seznamu soubor≈Ø k vylouƒçen√≠
EXCLUDE_FILE=$(mktemp)
cat > "$EXCLUDE_FILE" << EOF
.git/
.gitignore
__pycache__/
*.pyc
.env
.env.local
logs/
*.log
.idea/
.vscode/
*.swp
*.swo
.DS_Store
venv/
.pytest_cache/
node_modules/
instance-details.json
deploy-to-instance.sh
*.pem
EOF

# Nahr√°n√≠ soubor≈Ø pomoc√≠ rsync
echo -e "\n${YELLOW}üì¶ Nahr√°v√°n√≠ soubor≈Ø...${NC}"
rsync -avz --progress \
    -e "ssh -i $KEY_FILE -o StrictHostKeyChecking=no" \
    --exclude-from="$EXCLUDE_FILE" \
    "$PROJECT_ROOT/" \
    "$SSH_USER@$INSTANCE_IP:$TARGET_DIR/"

RSYNC_STATUS=$?

# Cleanup
rm -f "$EXCLUDE_FILE"

if [ $RSYNC_STATUS -eq 0 ]; then
    echo -e "\n${GREEN}‚úÖ Soubory √∫spƒõ≈°nƒõ nahr√°ny${NC}"
else
    echo -e "\n${RED}‚ùå Chyba p≈ôi nahr√°v√°n√≠ soubor≈Ø${NC}"
    exit 1
fi

# Nastaven√≠ opr√°vnƒõn√≠ pro skripty
echo -e "\n${YELLOW}üîß Nastaven√≠ opr√°vnƒõn√≠...${NC}"
ssh -i "$KEY_FILE" "$SSH_USER@$INSTANCE_IP" << EOF
    cd $TARGET_DIR
    chmod +x deployment/aws/*.sh
    chmod +x deployment/aws/*.py
    chmod +x test_binance_aws.py
EOF

# Kontrola .env souboru
echo -e "\n${YELLOW}üîë Kontrola konfigurace...${NC}"
if ssh -i "$KEY_FILE" "$SSH_USER@$INSTANCE_IP" "[ -f $TARGET_DIR/.env ]"; then
    echo -e "${GREEN}‚úÖ Soubor .env ji≈æ existuje${NC}"
else
    echo -e "${YELLOW}‚ö†Ô∏è  Soubor .env neexistuje${NC}"
    
    # Pokus o nahr√°n√≠ lok√°ln√≠ho .env souboru
    if [ -f "$PROJECT_ROOT/.env" ]; then
        read -p "Nahr√°t lok√°ln√≠ .env soubor? (y/N) " -n 1 -r
        echo
        if [[ $REPLY =~ ^[Yy]$ ]]; then
            scp -i "$KEY_FILE" "$PROJECT_ROOT/.env" "$SSH_USER@$INSTANCE_IP:$TARGET_DIR/"
            echo -e "${GREEN}‚úÖ .env soubor nahr√°n${NC}"
        fi
    else
        echo "Vytvo≈ôte .env soubor na serveru pomoc√≠:"
        echo "ssh -i $KEY_FILE $SSH_USER@$INSTANCE_IP"
        echo "cd $TARGET_DIR"
        echo "cp deployment/aws/.env.example .env"
        echo "nano .env"
    fi
fi

# Vytvo≈ôen√≠ adres√°≈ôe pro logy
ssh -i "$KEY_FILE" "$SSH_USER@$INSTANCE_IP" "mkdir -p $TARGET_DIR/logs"

# Souhrn
echo -e "\n${GREEN}üéâ Nasazen√≠ dokonƒçeno!${NC}"
echo "======================="
echo ""
echo -e "${YELLOW}üìã Dal≈°√≠ kroky:${NC}"
echo ""
echo "1. P≈ôipojte se k serveru:"
echo "   ssh -i $KEY_FILE $SSH_USER@$INSTANCE_IP"
echo ""
echo "2. P≈ôejdƒõte do adres√°≈ôe projektu:"
echo "   cd $TARGET_DIR"
echo ""
echo "3. Nainstalujte Python z√°vislosti:"
echo "   python3.9 -m venv venv"
echo "   source venv/bin/activate"
echo "   pip install -r requirements.txt"
echo ""
echo "4. Otestujte Binance API:"
echo "   python test_binance_aws.py"
echo ""
echo "5. Spus≈•te monitoring:"
echo "   chmod +x deployment/aws/start_monitor.sh"
echo "   ./deployment/aws/start_monitor.sh"
echo ""
echo -e "${GREEN}üåê Dashboard bude dostupn√Ω na: http://$INSTANCE_IP:8000${NC}"